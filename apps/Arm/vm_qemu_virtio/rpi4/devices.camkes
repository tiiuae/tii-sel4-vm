/*
 * Copyright 2022, 2023, Technology Innovation Institute
 *
 * SPDX-License-Identifier: Apache-2.0
 */
#include <configurations/vm.h>

#define VM_RAM_OFFSET 0
#define VM_INITRD_MAX_SIZE  0x2000000   // 32 MB

#define VM0_RAM_BASE    0x10000000
#define VM0_RAM_SIZE    0x10000000
#define VM0_DTB_ADDR    0x1F000000
#define VM0_INITRD_ADDR 0x1D000000  // VM0_DTB_ADDR - VM_INITRD_MAX_SIZE

#if defined(VMSWIOTLB)
#define VM1_RAM_BASE    0x50000000
#define VM1_RAM_SIZE    0x10000000
#define VM1_DTB_ADDR    0x5F000000  // VM1_RAM_BASE + 0x0F000000
#define VM1_INITRD_ADDR 0x5D000000  // VM1_DTB_ADDR - VM_INITRD_MAX_SIZE
#else
#define VM1_RAM_BASE    0x48000000
#define VM1_RAM_SIZE    0x10000000
#define VM1_DTB_ADDR    0x4F000000  // VM1_RAM_BASE + 0x07000000
#define VM1_INITRD_ADDR 0x4D000000  // VM1_DTB_ADDR - VM_INITRD_MAX_SIZE
#endif

#if defined(VMSWIOTLB)
#define SWIOTLB_GPA     0x48000000
#define SWIOTLB_SIZE    0x800000        // 8 MB
#define SWIOTLB_NSLABS  4096            // SWIOTLB_SIZE >> IO_TLB_SHIFT (11)
#define DATAPORT_SIZE   SWIOTLB_SIZE
#else
#define DATAPORT_SIZE   VM1_RAM_SIZE
#endif

assembly {
    composition {}
    configuration {
#if !defined(VMSWIOTLB)
        vm_memdev.paddr = VM1_RAM_BASE;
#endif
        vm_memdev.size = DATAPORT_SIZE;

        /* It is important to have equal size for all dataports, otherwise
         * Linux kernel remaps the PCI devices. seL4's vPCI does not
         * support that and everything would break.
         */
        vm_ctrl.size = DATAPORT_SIZE;
        vm_iobuf.size = DATAPORT_SIZE;

        vm0.linux_address_config = {
            "linux_ram_base" : VAR_STRINGIZE(VM0_RAM_BASE),
            "linux_ram_paddr_base" : VAR_STRINGIZE(VM0_RAM_BASE),
            "linux_ram_size" : VAR_STRINGIZE(VM0_RAM_SIZE),
            "linux_ram_offset" : VAR_STRINGIZE(VM_RAM_OFFSET),
            "dtb_addr" : VAR_STRINGIZE(VM0_DTB_ADDR),
        };
        vm0.num_vcpus = 1;
        vm0.linux_image_config = {
            "linux_bootcmdline" :
                "console=ttyS0,115200 "
                "earlycon=uart8250,mmio32,0xfe215040 "
                "8250.nr_uarts=1 "
                "rw "
                "debug "
                "loglevel=7 "
                "pci=nomsi "
                "nosmp "
                "cma=64M "
#if defined(VMSWIOTLB)
                "sel4_use_swiotlb "
#endif
                "initcall_blacklist=clk_disable_unused ",
            "linux_stdout" : "/soc/serial@7e215040",
        };
        vm0.images = VM_IMAGES(
            VM_IMAGE(initrd, "linux-initrd", "raw", VM0_INITRD_ADDR, VM_INITRD_MAX_SIZE)
        );
        vm0.tracebuffer_base = 0x08800000;
        vm0.tracebuffer_size = 0x200000;
        vm0.mmios = [
            "0xff846000:0x1000:12"
        ];
        vm0.untyped_mmios = [
            "0x10000000:28",  // RAM
            "0x600000000:33", // PCIe
        ];
        vm0.irqs =  [];
        vm0.dtb = dtb([
            { "path": "/soc/mailbox@7e00b880" },
            { "path": "/soc/serial@7e215040" },
            { "path": "/soc/cprman@7e101000" },
            { "path": "/soc/gpio@7e200000" },
            // UART 0 pinctrl
            /*
            { "path": "/soc/gpio@7e200000/bt_pins" },
            { "path": "/soc/gpio@7e200000/uart0_pins" },
            { "path": "/soc/gpio@7e200000/uart0_gpio14" },
            */
            { "path": "/scb/ethernet@7d580000" },
            // Communication to VC
            { "path": "/soc/mailbox@7e00b880" },
            { "path": "/soc/firmware" },
            // Required by HDMI driver
            { "path": "/soc/dma-ranges" },
            { "path": "/soc/dma@7e007000" },
            { "path": "/soc/interrupt-controller@7ef00100" },
            // HDMI0
            { "path": "/soc/hdmi@7ef00700" },
            { "path": "/soc/i2c@7ef04500" },
            { "path": "/soc/pixelvalve@7e20a000" },
            // HDMI1
            { "path": "/soc/hdmi@7ef05700" },
            { "path": "/soc/i2c@7ef09500" },
            { "path": "/soc/pixelvalve@7e216000" },
            // GPU
            { "path": "/soc/hvs@7e400000" },
            { "path": "/soc/txp@7e004000" },
            { "path": "/gpu" },
            // Required by 3D acceleration
            { "path": "/soc/cprman@7e101000" },
            { "path": "/soc/watchdog@7e100000" },
            { "path": "/v3dbus/v3d@7ec04000" },
            // PCIe
            { "path": "/scb/pcie@7d500000" },
            { "path": "/scb/pcie@7d500000/pci@0,0" },
            // USB
            // TODO: Here need to be following line,
            // but build system are not able to proceess it
            // So it will be added in fdt_manipulation.c
            // Ticket to track: HYPR-434
            // { "path": "/scb/pcie@7d500000/pci@0,0/usb@0,0" },
            { "path": "/soc/firmware/reset" },
            // ramoops memory
            { "path": "/reserved-memory"},
        ]);

        vm1.linux_address_config = {
            "linux_ram_base" : VAR_STRINGIZE(VM1_RAM_BASE),
            "linux_ram_paddr_base" : VAR_STRINGIZE(VM1_RAM_BASE),
            "linux_ram_size" : VAR_STRINGIZE(VM1_RAM_SIZE),
            "linux_ram_offset" : VAR_STRINGIZE(VM_RAM_OFFSET),
            "dtb_addr" : VAR_STRINGIZE(VM1_DTB_ADDR),
#if defined(VMSWIOTLB)
            "swiotlb_gpa" : VAR_STRINGIZE(SWIOTLB_GPA),
            "swiotlb_size" : VAR_STRINGIZE(SWIOTLB_SIZE),
#endif
        };
        vm1.linux_image_config = {
            "linux_bootcmdline" :
                "console=hvc0 "
                "earlycon=pl011,mmio32,0x09000000 "
                "root=/dev/vda2 "
                "rw "
                "debug "
                "loglevel=8 "
                "pci=nomsi "
#if defined(VMSWIOTLB)
                "swiotlb="VAR_STRINGIZE(SWIOTLB_NSLABS)",,force "
#endif
                "initcall_blacklist=clk_disable_unused ",
            "linux_stdout" : "hvc0",
        };
        vm1.mmios = [
            "0xff846000:0x1000:12"
        ];
#if defined(VMSWIOTLB)
        vm1.untyped_mmios = [
            "0x50000000:28",
        ];
#else
        /* Note that RAM is not specified here */
#endif
        vm1.irqs =  [];
        vm1.dtb = dtb([
            { "path": "/reserved-memory"},
        ]);
    }
}
